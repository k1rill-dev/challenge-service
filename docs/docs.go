// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "http://www.example.com/support",
            "email": "support@example.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/challenges": {
            "get": {
                "description": "Fetches a list of all challenges",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Challenges"
                ],
                "summary": "Retrieve all challenges",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.AuthenticationChallenge"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new challenge with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Challenges"
                ],
                "summary": "Create a new challenge",
                "parameters": [
                    {
                        "description": "Challenge Data",
                        "name": "challenge",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.AuthenticationChallenge"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.AuthenticationChallenge"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/challenges/team/{team_id}": {
            "get": {
                "description": "Retrieves all challenges associated with a specific team",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Challenges"
                ],
                "summary": "Get challenges for a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "team_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.AuthenticationChallenge"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/challenges/user/{user_id}": {
            "get": {
                "description": "Retrieves all challenges associated with a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Challenges"
                ],
                "summary": "Get challenges for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.AuthenticationChallenge"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/challenges/{id}": {
            "put": {
                "description": "Updates the details of an existing challenge",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Challenges"
                ],
                "summary": "Update an existing challenge",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Challenge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Challenge Data",
                        "name": "challenge",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commands.UpdateChallengeCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {}
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes a challenge by its ID",
                "tags": [
                    "Challenges"
                ],
                "summary": "Delete a challenge",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Challenge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.DeleteChallengeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pingpong": {
            "get": {
                "description": "Responds with a \"pong\" message to check service availability",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Check service health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PingResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "commands.UpdateChallengeCommand": {
            "type": "object",
            "properties": {
                "aggregateID": {
                    "type": "integer"
                },
                "challenge_id": {
                    "type": "integer"
                },
                "creator_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "interests": {
                    "type": "string"
                },
                "is_team": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "description": "семейный, личный, общий(групповой)",
                    "type": "string"
                }
            }
        },
        "entity.AuthenticationChallenge": {
            "type": "object",
            "properties": {
                "creator_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "interests": {
                    "type": "string"
                },
                "is_team": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "description": "семейный, личный, общий(групповой)",
                    "type": "string"
                }
            }
        },
        "handlers.DeleteChallengeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.PingResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Challenge Service API",
	Description:      "This is a sample server for managing challenges.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
