definitions:
  entity.AuthenticationChallenge:
    properties:
      creator_id:
        type: integer
      description:
        type: string
      end_date:
        type: string
      icon:
        type: string
      id:
        type: integer
      image:
        type: string
      is_finished:
        type: boolean
      is_team:
        type: boolean
      name:
        type: string
      start_date:
        type: string
      type:
        description: семейный, личный, общий(групповой)
        type: string
    type: object
  entity.AuthenticationParticipant:
    properties:
      achievement:
        type: string
      challenge:
        $ref: '#/definitions/entity.AuthenticationChallenge'
      challenge_id:
        type: integer
      creator_id:
        type: integer
      id:
        type: integer
      progress:
        type: string
      status:
        type: string
      team_id:
        type: integer
    type: object
  handlers.DeleteChallengeResponse:
    properties:
      message:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  handlers.PingResponse:
    properties:
      message:
        type: string
    type: object
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: This is a sample server for managing challenges.
  title: Challenge Service API
  version: "1.0"
paths:
  /challenges:
    get:
      description: Fetches a list of all challenges
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.AuthenticationChallenge'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Retrieve all challenges
      tags:
      - Challenges
    post:
      consumes:
      - multipart/form-data
      description: Creates a new challenge with the provided data
      parameters:
      - description: Challenge Data
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/entity.AuthenticationChallenge'
      - description: Image File
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.AuthenticationChallenge'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new challenge
      tags:
      - Challenges
  /challenges/{id}:
    delete:
      description: Removes a challenge by its ID
      parameters:
      - description: Challenge ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.DeleteChallengeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a challenge
      tags:
      - Challenges
    put:
      consumes:
      - multipart/form-data
      description: Updates the details of an existing challenge
      parameters:
      - description: Challenge ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Challenge Data
        in: body
        name: challenge
        schema:
          $ref: '#/definitions/entity.AuthenticationChallenge'
      - description: New Image File
        in: formData
        name: image
        type: file
      - description: New Icon File
        in: formData
        name: icon
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update an existing challenge
      tags:
      - Challenges
  /challenges/close/{challenge_id}:
    post:
      description: This method closes challenge and send message to winner
      parameters:
      - description: Challenge ID
        in: path
        name: challenge_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.AuthenticationChallenge'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Close challenge
      tags:
      - Challenges
  /challenges/team/{team_id}:
    get:
      description: Retrieves all challenges associated with a specific team
      parameters:
      - description: Team ID
        in: path
        name: team_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.AuthenticationChallenge'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get challenges for a team
      tags:
      - Challenges
  /challenges/team/register/{team_id}:
    post:
      description: Register team on challenge
      parameters:
      - description: Team ID
        in: path
        name: team_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.AuthenticationParticipant'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register team on challenge
      tags:
      - Challenges
  /challenges/user/{user_id}:
    get:
      description: Retrieves all challenges associated with a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.AuthenticationChallenge'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get challenges for a user
      tags:
      - Challenges
  /challenges/user/register:
    post:
      description: Register user on challenge
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.AuthenticationParticipant'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register user on challenge
      tags:
      - Challenges
  /pingpong:
    get:
      description: Responds with a "pong" message to check service availability
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PingResponse'
      summary: Check service health
      tags:
      - Health
swagger: "2.0"
